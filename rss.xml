<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haxe programming language - Code Cookbook</title><link>https://code.haxe.org/</link><description>Easy to read Haxe programming language examples.</description><managingEditor>contact@haxe.org (Haxe Foundation)</managingEditor><docs>http://blogs.law.harvard.edu/tech/rss</docs><language>en</language><lastBuildDate>Thu, 13 Sep 2018 12:43:03 GMT</lastBuildDate><atom:link href="https://code.haxe.org/rss.xml" rel="self" type="application/rss+xml"/><item><title>Publish to Haxelib using Travis and Github Releases</title><link>https://code.haxe.org/category/other/deploy-to-haxelib-using-travis-and-github-releases.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/deploy-to-haxelib-using-travis-and-github-releases.html</guid><description>This tutorial will help you publish your library automatically to lib.haxe.org when you create a release on GitHub.</description><pubDate>Tue, 17 Jul 2018 00:00:00 GMT</pubDate></item><item><title>A fixed ring array</title><link>https://code.haxe.org/category/data-structures/ring-array.html</link><guid isPermaLink="true">https://code.haxe.org/category/data-structures/ring-array.html</guid><description>A fixed ring array are especially useful when you need a hard upper bound for how much data can be in the queue.</description><pubDate>Sat, 14 Apr 2018 00:00:00 GMT</pubDate></item><item><title>ML-Style Parse Tree Evaluation</title><link>https://code.haxe.org/category/functional-programming/functional-style-expression-evaluation.html</link><guid isPermaLink="true">https://code.haxe.org/category/functional-programming/functional-style-expression-evaluation.html</guid><description>ML-like languages are great for creating interpreters or compilers, by virtue of Algebraic Data Types. Haxe's enum allow for writing similarly elegant code.</description><pubDate>Mon, 12 Feb 2018 00:00:00 GMT</pubDate></item><item><title>Invoke object method by string</title><link>https://code.haxe.org/category/beginner/reflection-method-call.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/reflection-method-call.html</guid><description>To invoke method by it's name you will need to use Reflection API.</description><pubDate>Tue, 23 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Email address as abstract type</title><link>https://code.haxe.org/category/abstract-types/emailaddress.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/emailaddress.html</guid><description>The following EmailAddress Abstract type example is based on the underlying standard String type, but sets the restriction that it can only represent a valid email address. If not, an exception will be thrown.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Strict typing for stringly-typed extern code</title><link>https://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</guid><description>A common pattern, often found in (but not only in) dynamic languages, is to denote the type of some object with a string, for example:</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Array access of a database manager</title><link>https://code.haxe.org/category/abstract-types/array-access-db-manager.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/array-access-db-manager.html</guid><description>When using SPOD database objects, or the record-macros library, instances of database models can be accessed using the manager's get function:</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Color as abstract type</title><link>https://code.haxe.org/category/abstract-types/color.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/color.html</guid><description>The following example demonstrates how a color type can be abstracted over an integer, which stores the color in an ARGB format.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Rounded Float as abstract type</title><link>https://code.haxe.org/category/abstract-types/rounded-float.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/rounded-float.html</guid><description>This abstract type is based on the underlying Float type, but whenever it is converted back to an actual Float it is rounded to avoid the famous rounding errors occuring in floating point aritmetics.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Temperature units as abstract type</title><link>https://code.haxe.org/category/abstract-types/temperature-units.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/temperature-units.html</guid><description>The following Celcius and Fahrenheit Abstract types are based on the underlying Float type, but sets the restriction that it can never hold values below absolute zero. </description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Using Iterators as Generic Type Parameters</title><link>https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</guid><description>Iterators are a helpful Haxe structure. Any structure that implements the next and hasNext functions with the appropriate signature will allow you build a for loop. Arrays have an iterator() function that returns exactly this, and you don't need to call it, the for language construction does it for you.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Using arrays</title><link>https://code.haxe.org/category/beginner/arrays.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/arrays.html</guid><description>In Haxe, the Array type represents a collection of elements ordered by their index (order number) in the collection.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Conditional compilation</title><link>https://code.haxe.org/category/beginner/conditional-compilation.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/conditional-compilation.html</guid><description>This snippet demonstrates use of conditional compilation with custom compiler flags.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Working with date and time</title><link>https://code.haxe.org/category/beginner/date-time.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/date-time.html</guid><description>The Date class provides a basic structure for date and time related information. This article shows how to work with the date and time tools.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Declare classes</title><link>https://code.haxe.org/category/beginner/declare-classes.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/declare-classes.html</guid><description>Create a new class with two functions and create a new instance of it.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Declare functions</title><link>https://code.haxe.org/category/beginner/declare-functions.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/declare-functions.html</guid><description>Declare function with arguments</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Using enum / ADT</title><link>https://code.haxe.org/category/beginner/enum-adt.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/enum-adt.html</guid><description>Haxe's enumeration types are algebraic data types. Their primary use is for describing data structures.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Hello world</title><link>https://code.haxe.org/category/beginner/hello-world.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/hello-world.html</guid><description>This tutorial demonstrates how to write and compile a Hello World Haxe program. It explains the involved file-format (.hx) and gives a basic explanation of what the Haxe Compiler does with them.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Using lists</title><link>https://code.haxe.org/category/beginner/lists.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/lists.html</guid><description>In Haxe, the List type represents a linked-list of elements.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Loading an external file</title><link>https://code.haxe.org/category/beginner/loading-external-files.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/loading-external-files.html</guid><description>This example uses haxe.Http to load external json file using and demonstrates how to handle the result.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item></channel></rss>